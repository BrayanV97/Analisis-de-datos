a = {'Diesel': 5,
	'Petrol': 4,
	'CNG': 3,
	'LPG': 2,
	'Electric': 1
	}

df_proc['fuel'] = df_proc['fuel'].map(a)

b = {'Individual': 3,
	'Dealer': 2,
	'Trustmark Dealer': 1
	}

df_proc['seller_type'] = df_proc['seller_type'].map(b)

c = {'Manual': 2,
	'Automatic': 1
	}

df_proc['transmission'] = df_proc['transmission'].map(c)

d = {'First Owner': 1,
	'Second Owner': 2,
	'Third Owner': 3,
	'Fourth & Above Owner': 4,
	'Test Drive Car': 5
	}

df_proc['owner'] = df_proc['owner'].map(d)

#Creamos una funcion para presentar los modelos y su evaluacion con las diferentes metricas
def crea_modelos():
    global df_proc, resultados
    y = df_proc['selling_price']
    x = df_proc.drop(columns=['selling_price','name'])
    train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.30, random_state = 77)
    
    #Diccionario de modelos
    models = {
        'Regresión Logística': LogisticRegression(),
        'Árbol de Decisión': DecisionTreeClassifier(),
        'Random Forest': RandomForestClassifier(),
        'Naive Bayes': GaussianNB()
    }
    
    #Diccionario de resultados
    results = {
        'Model': [], 
        'Accuracy': [],
        'Precision': [],
        'Recall': [],
        'F1-score': [],
        'AUC-ROC': []
    }

    for name, model in models.items():
        model.fit(train_x, train_y)
        predictions = model.predict(test_x)

        #Metricas a evaluar
        accuracy = accuracy_score(test_y, predictions)
        precision = precision_score(test_y, predictions)
        recall = recall_score(test_y, predictions)
        f1 = f1_score(test_y, predictions)
        if hasattr(model, "predict_proba"):
            proba = model.predict_proba(test_x)
            roc_auc = roc_auc_score(test_y, proba[:, 1])
        else:
            roc_auc = None

        results['Model'].append(name)
        results['Accuracy'].append(accuracy)
        results['Precision'].append(precision)
        results['Recall'].append(recall)
        results['F1-score'].append(f1)
        results['AUC-ROC'].append(roc_auc)

    resultados = results

crea_modelos()
for i,model in enumerate(resultados['Model']):
    print(model)
    print(resultados['Accuracy'][i])
    print(resultados['Precision'][i])
    print(resultados['Recall'][i])
    print(resultados['F1-score'][i])
    print(resultados['AUC-ROC'][i])
    print('\n')
    #Para mostrar los resultados de cada modelo